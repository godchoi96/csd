# 정렬 정리

# 1. 버블 정렬
# [3, 6, 2, 7, 1]이 있다면 다음과 같이 정렬한다.
# 전체 리스트를 완전 탐색하고 노드마다 값을 비교한다.
# [3, 6] 비교 -> [6, 2] 비교 ... [2, 6] 변환 -> [6, 7] 비교 -> [7, 1] 비교 ... [1, 7] 변환 : 현재 리스트는 [3, 2, 6, 1, 7]
# [3, 2] 비교 ... [2, 3] 변환 -> [3, 6] 비교 -> [6, 1] 비교 ... [1, 6] 변환 -> [6, 7] 비교 : 현재 리스트는 [2, 3, 1, 6, 7]
# [2, 3] 비교 -> [3, 1] 비교 ... [1, 3] 변환 -> [3, 6] 비교 -> [6, 7] 비교 : 현재 리스트는 [2, 1, 3, 6, 7]
# [2, 1] 비교 ... [1, 2] 변환 -> [2, 3] 비교 -> [3, 6] 비교 -> [6, 7] 비교 : 현재 리스트는 [1, 2, 3, 6, 7]
# 변환되는 리스트를 보면 가장 큰 값이 계속 뒤에 위치하는 것을 알 수 있다.

for i in range(5 - 1):
    for j in range(5 - i - 1):
        print(j)
# 0 1 2 3 0 1 2 0 1 0

def bubble_sort(array):
    for i in range(len(array) - 1):
        for j in range(len(array) - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j+ 1], array[j]

    return array

print(bubble_sort([3, 6, 2, 7, 1]))

# 2. 선택 정렬
# [3, 6, 2, 7, 1]이 있다면 다음과 같이 정렬한다.
# 전체 리스트를 완전 탐색하고 가장 작은 숫자를 앞으로 보낸다.
# [3, 6, 2, 7, 1] -> [1, 6, 2, 7, 3] : 현재 리스트는 [1, 6, 2, 7, 3]
# [6, 2, 7, 3] -> [2, 6, 7, 3] : 현재 리스트는 [1, 2, 6, 7, 3]
# [6, 7, 3] -> [3, 6, 7] : 현재 리스트는 [1, 2, 3, 6, 7]
# [6, 7] -> [6, 7] : 현재 리스트는 [1, 2, 3, 6, 7]

for i in range(5 - 1):
    for j in range(5 - i):
        print(i + j)
# 0 1 2 3 4 1 2 3 4 2 3 4 3 4

def selection_sort(array):
    for i in range(len(array) - 1):
        min_index = i
        for j in range(len(array) - i):
            if array[min_index] > array[i + j]:
                min_index = i + j
        array[i], array[min_index] = array[min_index], array[i]
    return array

print(selection_sort([3, 6, 2, 7, 1]))

# 3. 삽입 정렬
# [3, 6, 2, 7, 1]이 있다면 다음과 같이 정렬한다.
# [3] ... [3, 6] -> [3, 6] : 현재 리스트는 [3, 6, 2, 7, 1]
# [3, 6] ... [3, 6, 2] -> [3, 2, 6] -> [2, 3, 6] : 현재 리스트는 [2, 3, 6, 7, 1]
# [2, 3, 6] ... [2, 3, 6, 7] -> [2, 3, 6, 7] : 현재 리스트는 [2, 3, 6, 7, 1]
# [2, 3, 6, 7] ... [2, 3, 6, 7, 1] -> [2, 3, 6, 1, 7] -> [2, 3, 1, 6, 7] -> [2, 1, 3, 6, 7] -> [1, 2, 3, 6, 7] : 현재 리스트는 [1, 2, 3, 6, 7]

for i in range(1, 5):
    for j in range(i):
        print(i - j)
# 1 2 1 3 2 1 4 3 2 1

# 로직에 대한 이해가 조금 어려워서 단계별로 구분했다.
# 1단계 [3, 6, 2, 7, 1]
#         <-
#          1
# 2단계 [3, 6, 2, 7, 1]
#         <- <-
#          1  2
# 3단계 [3, 6, 2, 7, 1]
#         <- <- <-
#          1  2  3
# 4단계 [3, 6, 2, 7, 1]
#         <- <- <- <-
#          1  2  3  4
# 가장 앞 인덱스는 정렬되있을 수도 있기 때문에 반복에 넣지 않고 1부터 시작함. 1 2 1 3 2 1 4 3 2 1

def insertion_sort(array):
    for i in range(1, len(array)):
        for j in range(i):
            if array[i - j] < array[i - j - 1]:
                array[i - j], array[i - j - 1] = array[i - j - 1], array[i - j]
            else:
                break
    return array

print(insertion_sort([3, 6, 2, 7, 1]))