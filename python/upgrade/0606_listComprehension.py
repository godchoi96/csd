# 리스트 컴프리헨션

r1 = [1, 2, 3, 4, 5]
r2 = []
for i in r1:
    r2.append(i * 2)

print(r2)
"""
1.
r1에 리스트 [1, 2, 3, 4, 5] 라는 객체가 참조되어 있다. 이 r1 변수에서 r2라는 새로운 리스트를 만드는데 *2를 해서 만들고 싶으면 어떻게 해야할까?
빈 리스트를 만든 다음에 반복문을 통해 append 메소드를 활용해 2를 곱해주고 붙여넣었을 것이다.
"""

r1 = [1, 2, 3, 4, 5]
r2 = [i * 2 for i in r1]
print(r2)
"""
2.
리스트 컴프리헨션을 사용하면 다음과 같이 한 줄로 간단하게 작성할 수 있다. 
이것은 하나의 약속이기 때문에 되도록이면 위 코드가 아닌 아래 코드처럼 작성하는 것이 좋다.
나는 사용하는 순서를 ["어떠한 형식으로 출력할지" "반복문"] 이런 식으로 간단하게 생각했다. 되도록 자신이 편한대로 기억하는 게 좋을 것 같다.
"""

r1 = [1, 2, 3, 4, 5]
r2 = [i * 2 for i in r1 if i % 2]
print(r2)
"""
3.
조건문이 들어간 리스트 컴프리헨션은 다음과 같다.
기존에 리스트 컴프리헨션을 작성하던 것에 뒤에 조건문을 추가해주면 된다.
"""

r1 = ['Red', 'Black']
r2 = ['Shirt', 'Pants', 'Shoes']
r3 = [i + j for i in r1 for j in r2]
print(r3)
"""
4.
중첩된 for 구문에서도 리스트 컴프리헨션을 사용할 수 있다.
가장 왼쪽에 있는 for에서 그 다음의 for 구문으로 인해 반복되어져 가는 것이다.
"""

r = [i * j for i in range(2, 10) for j in range(1, 10) if (i * j) % 2]
print(r)
"""
5.
리스트 컴프리헨션으로 응용한 예제이다.
2단부터 9단까지의 각 모든 결과값을 리스트에 넣는데 홀수인 것만 넣는다는 의미이다.
원래 코드를 작성했다면 길어지지만 리스트 컴프리헨션을 통해 한 줄로도 가볍게 쓸 수 있는 것을 알 수 있다.
"""
