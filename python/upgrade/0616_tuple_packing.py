# 튜플의 패킹와 언패킹

tria = (12, 15)
print(type(tria))
print(tria)
"""
1.
하나 이상의 값을 튜플로 묶는 것을 튜플 패킹이라고 한다.
간단히 하나 이상의 인자를 튜플로 묶었다고 생각하면 될 듯하다.
"""

tria = 12, 15
print(type(tria))
print(tria)
"""
2.
소괄호를 사용해 패킹을 했지만 굳이 쓰지 않아도 튜플로 패킹이 되었음을 알 수 있다.
"""

tria = 12, 15
tr, le = tria
print(tr, le)
"""
3.
이제 패킹이 되어있는 tria 라는 변수에서 값을 꺼내 보겠다.
튜플로 패킹되어 있는 변수 안의 인자 수와 밖에서 참조시키려는 변수의 수가 같으면 값이 꺼내진다.
이를 튜플 언패킹이라고 한다.
"""

nums = 1, 2, 3, 4, 5
n1, n2, *others = nums
print(n1)
print(n2)
print(others)
"""
4.
언패킹을 하는 다른 예제를 확인해보자.
n1, n2 라는 변수는 알겠는데 *others라는 변수는 처음 보았다. 둘 이상의 값을 리스트로 묶을 때 *을 사용한다.
즉, 언패킹하려는 변수의 개수와 튜플로 패킹된 변수의 내부 인자 수가 같아야 한다고 했는데 나머지 값들이 리스트로 묶이게 될 것이다.
"""

nums = 1, 2, 3, 4, 5
n1, *others, n2 = nums
print(n1)
print(others)
print(n2)
"""
5.
*를 사용한 others 변수가 가운데에 있으면 어떻게 동작할까?
파이썬에서 n1, n2의 값은 1, 5로 참조해주고 others에 [2, 3, 4]를 참조하게 만든다.
어떤 위치에 존재하든 파이썬에서 이를 자동적으로 처리해주는 것을 인지하고 있으면 된다.
"""

nums = [1, 2, 3, 4, 5]
n1, n2, *others = nums
print(n1)
print(n2)
print(others)
"""
6.
튜플로 패킹된 것뿐만이 아닌 리스트로 패킹이 되어 있어도 이는 똑같이 동작한다.
"""

def sum(*nums):
    s = 0
    for i in nums:
        s += i
    return s

print(sum(1, 2, 3))

def show_man(name, age, height):
    print(name, age, height, sep=', ')

csd = ('Choi', 27, 182)
print(show_man(*csd))
"""
7.
*에 대해 조금 더 알아보자. 기존에는 계속 무언가 인자들을 묶는 방식으로 이야기했는데 실질적으로 그렇지는 않다.
정확히는 함수에서 호출될 때는 언패킹이 진행된다. 이에 대한 예제를 보자.
먼저 sum 이라는 함수를 보면 파라미터에 *이 들어가있는 것을 확인할 수 있다. 따라서 패킹이 진행되므로 sum(1, 2, 3)은 [1, 2, 3]이 된다.
하지만 아래 show_man 이라는 함수를 보면 3개의 인자를 받고 함수를 호출할 때 그 인자로 *을 사용했다.
그리고 출력문을 확인해보면 언패킹이 되었음을 확인할 수 있다.

이처럼 정리하자면 함수 호출을 제외한 *은 패킹을, 함수 호출에서의 *은 언패킹을 의미한다.
"""

csd = 'Choi', (27, 182), '010-7184-2939', 'Korea'
name, (age, tall), phone, country = csd
print(name, tall)
"""
8.
이번에는 중간에 튜플로 된 객체가 있다고 가정했을 때의 언패킹이다.
일단 csd 라는 변수에 튜플로 패킹을 하고 각자의 변수를 주어 튜플 내의 객체를 참조했다.
이 떄, 튜플 객체가 존재할 시 반드시 소괄호를 사용해서 구분해주어야 한다.
"""

csd = 'Choi', (27, 182), '010-7184-2939', 'Korea'
name, (_, tall), _, _ = csd
print(name, tall)
"""
9.
하지만 모든 변수로 언패킹하는 과정에서 일일이 선언해주는 것은 사실 좀 가독성도 떨어지고 헷갈릴 수 있다.
그렇기 때문에 파이썬 자체에서 해주는 것은 아니지만 프로그래머들 사이에서 약속된 관례로 쓰지 않는 변수는 _ 이런 식으로 참조한다.
"""

student = ['Choi', 182], ['Choi', 165], ['Cho', 180]
for n, t in student:
    print(n, t, sep= ', ')
"""
10.
패킹되어 있는 것을 반복문을 통해 언패킹하는 과정이다.
기존에 하던대로 생각하면 될 것 같다. 크게 어려운 점은 없다고 본다.
"""