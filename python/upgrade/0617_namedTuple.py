# 네임드 튜플

t = (3, 7)
bottom, height = t
print(bottom, height)

from collections import namedtuple

tri = namedtuple('Triangle', ['bottom', 'height'])
t = tri(3, 7)
print(t[0], t[1])
print(t.bottom, t.height)
"""
1.
기존에 튜플의 패킹와 언패킹을 통해서 그에 할당하는 변수를 참조하기 위해 각 변수를 일일이 선언했다.
이번에는 네임드 튜플이라고 하는 파이썬에서 제공해주는 패키지를 선언해서 이를 불러와보도록 한다.

일반적으로 튜플은 파이썬에서 클래스를 통해 객체로 저장이 된다.
따라서 우리는 임시로 클래스를 생성해주고 이에 대한 변수를 저장되도록 네임드 튜플을 사용할 수도 있다.
namedTuple 이라는 모듈로 먼저 'Triangle' 이라는 클래스 이름을 지정해주고 'bottom'과 'height' 라는 변수로 참조하도록 한다.
그렇다면 현재 Triangle 이라는 클래스가 bottom, height 변수로 참조하게 해주는 상황이다.
이를 tri 라는 변수로 참조해주고 3, 7의 객체를 참조시킨다.
이를 인덱스를 매겨서 확인해보면 각 값을 출력할 수 있고 또, 지정했던 변수로 확인해보면 마찬가지로 값을 출력할 수 있다.

그런데 보다보면 Triangle 이라는 클래스는 크게 의미가 없다.
하지만 이는 오류 메시지를 보여줄 때 필요로 한다.
"""

# t[0] = 10
# print(t[0])
"""
2.
위에서 참조했던 네임드 튜플인 t를 값을 수정하려고 하면 수정되지 않는다.
네임드 튜플 또한 immutable한 객체이기 때문이다.
이 때의 오류 메시지를 보면 'Triangle' object does nt support item assginment 라고 나오는데 여기서 'Triangle'이 바로 네임드 튜플을 생성할 때의 클래스이다.
"""

from collections import namedtuple

tri2 = namedtuple('tri2', 'bottom height')
tri2 = tri2(3, 7)
tri2[0] = 15
print(tri2[0])
"""
3.
네임드 튜플을 만들 때, '클래스 명' + '리스트 객체' 로 매핑했는데 굳이 이렇게 하지 않고도 만들 수 있다.
클래스 명과 이를 참조하는 변수 명을 같게 하고 리스트 객체를 문자열로 해도 동일하게 얻을 수 있다.
또한, 클래스 명을 같이 하면 네임드 튜플을 만들기 위해 선언한 클래스 명과 일치하기 때문에 오류를 쉽게 잡을 수 있다.

네임드 튜플을 사용하는 이유는 일반 튜플로 인덱스에 접근해서 사용하는 것보다 이름을 통해 접근하기 때문에 좀 더 가독성을 따질 수 있다.
위에서는 인덱스로 예시를 좀 들었지만 실질적으로는 key 값을 불러오는 것처럼 사용되어지기에 파이썬에서도 권장되는 방식이라고 한다.
"""