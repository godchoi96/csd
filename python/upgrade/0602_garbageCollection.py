# 레퍼런스 카운트와 가비지 컬렉션

s = 'garbage collection'
print(s)
"""
1.
파이썬에서는 모든 것이 하나의 객체이다. s라는 변수에도 "garbage collection" 이라고 하는 문자열이 담겨 있는 것이다.
객체는 컴퓨터 상에 존재하는 "메모리"의 영역에 할당이 되는데 항상 사용되는 것이 아니다. 메모리는 영역이 제한되어 있기 때문이다.
따라서 항상 존재하지 않기 때문에 사용하지 않는 객체는 메모리 상에서 지워야 한다. 지워지는 방법은 2가지가 존재한다. 컴퓨터가 자동으로 소멸시키거나 개발자가 직접 소멸시키는 방법이 있다.

일반적으로는 자동적으로 삭제되는데, 그렇다면 언제 자동적으로 삭제되는지 알아보는 자리이다.
위의 상황을 조금 더 구체적으로 생각하면 다음과 같다.
그냥 덩그러니 s라는 변수에 문자열을 넣었다고 생각하는 것이 아닌 파이썬의 가비지 컬렉션 공간에 문자열을 넣어두는데 이를 s라고 이름을 지칭해주고 우리가 필요할 때 찾아가는 것이다.
"""

r = [1, 2, 3]
"""
2.
조금 더 심화적으로 들어온 만큼, 그동안 우리는 위의 코드를 "r에 리스트 [1, 2, 3]을 넣었다." 라고 표현하지 않는다.
'변수 r에 리스트를 "참조"했다 또는 변수 r에 리스트를 레퍼런스했다.' 라고 표현한다.
"""

r = 'reference count'
print(r)
"""
3.
위에서 내가 변수 r에 리스트를 참조했다. 하지만 다시 문자열로 새로 참조를 시켜주고 print() 모듈을 실행하면 어떻게 될까?
결과부터 말하자면 문자열이 출력된다. 그렇다면 리스트로 지정했던 것은 어디로 갔을까? 이는 컴퓨터가 자동적으로 소멸시킨 것이다.
조금 더 쉽게 r이라는 스티커를 [1, 2, 3]이라고 하는 리스트에 붙였다가 새로운 객체 'reference count' 라고 하는 문자열에 스티커를 떼다가 붙인 것이라고 생각하면 된다.
스티커를 잃은 리스트는 참조하는 변수가 없기 때문에 컴퓨터에서 소멸 대상으로 인식하고 소멸시킨 것이다.

이해가 됐다면 이제 조금 파이썬적으로 이해를 해보자.
파이썬에서의 모든 객체는 각자 레퍼런스 카운트라고 하는 것을 가지고 있다. 리스트 [1, 2, 3]의 경우는 r이라는 변수를 참조했었기 때문에 레퍼런스 카운트는 1이었다.
하지만 새로운 객체 'reference count' 문자열이 변수 r를 새로 참조했고 리스트 [1, 2, 3]은 더 이상 참조하지 않기 때문에 레퍼런스 카운트가 0이 된다.
레퍼런스 카운트가 0이므로 소멸 대상이어서 컴퓨터가 소멸시켜버린다.

정리하면, 파이썬에서의 모든 객체는 저마다 레퍼런스 카운트를 가지고 있고 레퍼런스 카운트가 0이 되었을 때 소멸시킨다.
레퍼런스 카운트가 0인 객체는 메모리에 남겨두어봤자 접근할 수 없기 때문에 공간만 차지하는 쓰레기가 되기 때문이다.
"""

r1 = [1, 2, 3]
r2 = r1
r1 = 'reference'
r2 = 'count'
"""
4.
이제 배운 것으로 [1, 2, 3] 리스트는 소멸되었는지 생각해보자.
리스트 [1, 2, 3] 이라고 하는 객체에 r1 변수를 참조시킨다. 이 때 리스트 [1, 2, 3]의 레퍼런스 카운트는 1이다.
r2라는 새로운 변수에 r1 변수를 참조시킨다. r1 변수에는 리스트 [1, 2, 3]이 참조되어있고 r2에도 참조시키기 때문에 리스트 [1, 2, 3]의 레퍼런스 카운트는 2이다.
r1 변수에 새로운 객체 'reference' 문자열을 참조시킨다. 리스트 [1, 2, 3]의 레퍼런스 카운트는 r1 변수를 더 이상 참조하지 않기 때문에 1이다.
r2 변수에도 새로운 객체 'count' 문자열을 참조시킨다. 위와 마찬가지로 r2 변수를 더 이상 참조하지 않게 되었기 때문에 레퍼런스 카운트는 0이 되어 소멸 대상이 된다.
"""